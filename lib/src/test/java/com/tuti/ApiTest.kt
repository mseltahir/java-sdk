/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.tuti

import com.tuti.api.TutiApiClient
import com.tuti.api.authentication.SignInRequest
import com.tuti.api.authentication.SignInResponse
import com.tuti.api.authentication.SignUpRequest
import com.tuti.api.authentication.SignUpResponse
import com.tuti.api.data.Card
import com.tuti.api.data.Cards
import com.tuti.api.data.TutiResponse
import com.tuti.util.Utils
import org.junit.Assert
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import java.util.*

class ApiTest {
    @BeforeEach
    fun signIn() {
        val credentials = SignInRequest("0923377628", "Rami1111.")
        client.SignIn(
            credentials,
            { signInResponse: SignInResponse ->
                client.authToken = signInResponse.authorizationJWT
            }) { objectReceived: TutiResponse?, exception: Exception? ->

        }

    }

    @Test
    fun testSignInApi() {
        var credentials = SignInRequest("adonese", "12345678")
        client!!.SignIn(credentials, { signInResponse: SignInResponse ->
            val user = signInResponse.user
            println("User information from sign in endpoint (adonese case):\n$user")
            Assert.assertEquals("adonese", user.username)
            Assert.assertEquals("Mohamed Yousif", user.fullname)
            Assert.assertEquals("mmbusif@gmail.com", user.email)
            Assert.assertEquals("0925343834", user.mobileNumber)
            Assert.assertTrue(user.isMerchant)
            Assert.assertEquals(0, user.id.toLong())
        }) { error: TutiResponse?, exception: Exception? -> Assert.fail("sign in failed") }
        credentials = SignInRequest("non_existent_user" + Utils.generateRandomAlphanumericString(8), "asjfkdlj")
        client.SignIn(
            credentials,
            { signInResponse: SignInResponse? -> Assert.fail("sign in failed because the user is non existent") }) { error: TutiResponse?, exception: Exception? ->
            if (error != null) println(
                "\nNon existent user case:\n$error"
            )
            if (exception != null) Assert.fail("exception in sign in")
        }
    }

    @Test
    fun testSignUpApi() {
        val info = SignUpRequest()
        val tag = Utils.generateRandomNumericString(8)
        val mobileNumber = "02" + Utils.generateRandomNumericString(8)
        val username = "test_$tag"
        val email = "test_$tag@test.com"
        val fullname = Utils.generateARandomName() + " " + Utils.generateARandomName()
        val password = Utils.generateRandomAlphanumericString(12) + "A1."
        val isMerchant = Random().nextBoolean()
        info.mobileNumber = mobileNumber
        info.password = password
        info.username = username
        info.fullname = fullname
        info.email = email
        info.isMerchant = isMerchant
        client!!.Signup(info, { signUpResponse: SignUpResponse ->
            val user = signUpResponse.user
            println("User information from signup endpoint:\n$user")
            Assert.assertEquals(username, user.username)
            Assert.assertEquals(fullname, user.fullname)
            Assert.assertEquals(email, user.email)
            Assert.assertEquals(mobileNumber, user.mobileNumber)
            Assert.assertEquals(isMerchant, user.isMerchant)
        }) { error: TutiResponse?, exception: Exception? -> Assert.fail("sign up failed") }
        val creds = SignInRequest(username, password)
        client!!.SignIn(creds, { objectReceived: SignInResponse ->
            val user = objectReceived.user
            println("User information from sign in endpoint:\n$user")
            Assert.assertEquals(username, user.username)
            Assert.assertEquals(fullname, user.fullname)
            Assert.assertEquals(email, user.email)
            Assert.assertEquals(mobileNumber, user.mobileNumber)
            Assert.assertEquals(isMerchant, user.isMerchant)
            null
        }
        ) { errorReceived: TutiResponse?, exception: Exception? -> Assert.fail("sign in failed!") }
    }

    @Test
    fun testAddCardAndGetCard() {
        //generate random values for the tets
        val name = Utils.generateRandomAlphanumericString(16)
        val PAN = Utils.generateRandomNumericString(16)
        val expiryDate = Utils.generateRandomNumericString(4)

        //create a card object to hold the cards data
        val cardToAdd = Card(name = name,expiryDate= expiryDate,PAN = PAN)

        println("Card to add$cardToAdd")
        client.addCard(cardToAdd, { objectReceived: TutiResponse? -> }
        ) { errorReceived: TutiResponse?, exception: Exception? -> Assertions.fail<Any>("adding a card failed") }

        //get the cards from the api to assert that it was added successfully
        client.getCards({ cards: Cards ->
            outputCardsInfo(cards)
            var fail = true
            for (card in cards.cards!!) {
                if (card == cardToAdd) {
                    fail = false
                }
            }
            if (fail) Assert.fail("card was not found!")
        }) { objectReceived: TutiResponse?, exception: Exception? -> Assert.fail() }
    }

    fun outputCardsInfo(cards: Cards) {
        println("Cards associated with the account")
        for (card in cards.cards!!) {
            println(card)
        }
    }

    @Test
    fun testIPINBlockGenerator() {
        //System.out.println(new IPIN().getIPINBlock("0000","MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJ4HwthfqXiK09AgShnnLqAqMyT5VUV0hvSdG+ySMx+a54Ui5EStkmO8iOdVG9DlWv55eLBoodjSfd0XRxN7an0CAwEAAQ==", UUID.randomUUID().toString()));
    }

    companion object {
        var client: TutiApiClient = TutiApiClient()

        @BeforeAll
        fun setup() {
            client = TutiApiClient()
            client.isSingleThreaded = true
        }
    }
}